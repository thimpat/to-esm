/**
 * This file is to convert a Commonjs file into an ESM library
 * by just replacing module.exports to export default.
 * It's for very simple library, but will allow me to avoid using a bundler.
 */
const packageJson = require("../package.json");
const path = require("path");
const fs = require("fs");
const glob = require("glob");
const commondir = require("commondir");


const buildTargetDir = (targetDir) =>
{
    try
    {
        if (fs.existsSync(targetDir))
        {
            return;
        }
        fs.mkdirSync(targetDir, {recursive: true});
    }
    catch (e)
    {
        console.error("E3166156464654:", e);
    }
    ;
};

const convertNonTrivial = (converted) =>
{
    let converted0;
    do
    {
        const regex = /((?<!export\s+)(?:const|let)\s+)(\w+)(\s+=.*\bmodule\.exports\s*=\s*{[^}]*\2\b)/sgm;
        const subst = "export $1$2$3";
        converted0 = converted;
        converted = converted0.replace(regex, subst);
    }
    while (converted0.length !== converted.length);

    return converted;

};

const convertListFiles = (list, outputDir, noHeader = false) =>
{
    list.forEach((filepath) =>
    {
        let converted = fs.readFileSync(filepath, "utf-8");

        converted = convertNonTrivial(converted);

        // Convert module.exports to export default
        converted = converted.replace(/module\.exports\s*=/gm, "export default");

        // Convert module.exports.something to export something
        converted = converted.replace(/module\.exports\./gm, "export const ");

        // convert require with .json file to import
        converted = converted.replace(/const\s+([^=]+)\s*=\s*require\(([^)]+.json[^)])\)/gm, "import $1 from $2 assert {type: \"json\"}");

        // convert require with .js file to import
        converted = converted.replace(/const\s+([^=]+)\s*=\s*require\(([^)]+.js[^)])\)/gm, "import $1 from $2");

        // convert require with no file extension to import .mjs
        converted = converted.replace(/const\s+([^=]+)\s*=\s*require\(["'`]([^"'`]+)["'`]\)/gm, "import $1 from \"$2.mjs\"");

        if (!noHeader)
        {
            converted = `/**
 * DO NOT EDIT THIS FILE DIRECTLY.
 * This file is generated following the conversion of 
 * [${filepath}]
 * 
 **/    
` + converted;
        }


        const targetFile = path.basename(filepath, path.extname(filepath));

        if (!outputDir)
        {
            outputDir = path.join(path.dirname(filepath));
        }

        const targetFilepath = path.join(outputDir, targetFile + ".mjs");

        fs.writeFileSync(targetFilepath, converted, "utf-8");

        console.log(`${filepath} => ${targetFilepath}`);

    });
};

const convert = (cliOptions) =>
{
    try
    {
        // Input Files
        const inputFileMask = cliOptions.input;
        const list = glob.sync(inputFileMask);

        // Output Files
        const outputDir = cliOptions.output;

        if (outputDir)
        {
            buildTargetDir(outputDir);
        }

        // No header
        const noheader = cliOptions.noheader;
        convertListFiles(list, outputDir, noheader);
    }
    catch (e)
    {
        console.error(`${packageJson.name}:`, e.message)
    }

};

module.exports = convert
